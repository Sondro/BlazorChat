@inject IChatService ChatService

<div class="col m-1">    
    <div class="w-100 mb-2 chat-messages" style="min-height:200px;">
        @if(null != _messages){
            foreach (var message in _messages)
            {
                <p class='msg'>
                    <div class='msg-meta'>
                        <span class='who'>@message.Username</span>
                        <span class='when'>@message.When</span>
                    </div>
                    <span class='what'>@message.Text</span
                ></p>    
            }
        }
    </div>

    <div class="msg-form-container row">
        <div class="col">
            <EditForm Model=@_newMessage OnValidSubmit="HandleValidSubmit">
                <div class="form-group row">                
                    <div class="col mb-2">
                        <InputText id="message" @bind-Value=_newMessage.Text
                            class="form-control" placeholder="type your message here..." />
                    </div>                
                    <div class="col-2">
                        @if(!_sending){
                            <button type="submit" class="btn btn-primary btn-block"><i class="fa fa-comment"></i></button>
                        }
                    </div> 
                </div>                       
            </EditForm>
        </div>
    </div>

</div>

@code{
    private ViewModels.PostMessage _newMessage = new ViewModels.PostMessage();
    private List<Message> _messages;
    private bool _sending;

    protected override void OnInitialized()
    {
        ChatService.MessageReceived += OnMessage;
     
        _messages = new List<Message>();
        _sending = false;
    }

    private async void OnMessage(object sender, Message message)
    {
        _messages.Add(message);
        await InvokeAsync(StateHasChanged);
    }

    private void Dispose()
    {
        ChatService.MessageReceived -= OnMessage;
    }

    private async Task HandleValidSubmit()
    {
        _sending = true;
        await ChatService.PostMessageAsync(this.LoggedUser, _newMessage.Text);
        _newMessage = new ViewModels.PostMessage();
        _sending = false;
    }

    [Parameter]
    public User LoggedUser { get; set; }
}